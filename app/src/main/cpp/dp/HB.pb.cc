// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HB.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "HB.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
class CommandDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Command> {
} _Command_default_instance_;
class HeartbeatDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Heartbeat> {
} _Heartbeat_default_instance_;

namespace protobuf_HB_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _Command_default_instance_.Shutdown();
  _Heartbeat_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Command_default_instance_.DefaultConstruct();
  _Heartbeat_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::ExtensionSet::RegisterMessageExtension(
    ::Command::internal_default_instance(),
    101, 11, false, false,
    ::Heartbeat::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_HB_2eproto

bool Command_CommandType_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Command_CommandType Command::HEARTBEAT;
const Command_CommandType Command::CommandType_MIN;
const Command_CommandType Command::CommandType_MAX;
const int Command::CommandType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Heartbeat_TaskType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Heartbeat_TaskType Heartbeat::REALPLAY;
const Heartbeat_TaskType Heartbeat::RECORDPLAY;
const Heartbeat_TaskType Heartbeat::TALK;
const Heartbeat_TaskType Heartbeat::TaskType_MIN;
const Heartbeat_TaskType Heartbeat::TaskType_MAX;
const int Heartbeat::TaskType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Command::kTypeFieldNumber;
const int Command::kSrcIdFieldNumber;
const int Command::kVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Command::Command()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_HB_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Command)
}
Command::Command(const Command& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  srcid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_srcid()) {
    srcid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.srcid_);
  }
  ::memcpy(&version_, &from.version_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&version_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:Command)
}

void Command::SharedCtor() {
  _cached_size_ = 0;
  srcid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = 0;
  type_ = 1;
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:Command)
  SharedDtor();
}

void Command::SharedDtor() {
  srcid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Command& Command::default_instance() {
  protobuf_HB_2eproto::InitDefaults();
  return *internal_default_instance();
}

Command* Command::New(::google::protobuf::Arena* arena) const {
  Command* n = new Command;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:Command)
  _extensions_.Clear();
  if (has_srcid()) {
    GOOGLE_DCHECK(!srcid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*srcid_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    version_ = 0;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Command.CommandType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Command_CommandType_IsValid(value)) {
            set_type(static_cast< ::Command_CommandType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string srcId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_srcid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 version = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag)) {
          DO_(_extensions_.ParseField(tag, input, internal_default_instance(),
                                      &unknown_fields_stream));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Command)
  return false;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Command)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Command.CommandType type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required string srcId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->srcid(), output);
  }

  // required int32 version = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->version(), output);
  }

  // Extension range [100, 536870912)
  _extensions_.SerializeWithCachedSizes(
      100, 536870912, output);

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Command)
}

size_t Command::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Command)
  size_t total_size = 0;

  if (has_srcid()) {
    // required string srcId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->srcid());
  }

  if (has_version()) {
    // required int32 version = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());
  }

  if (has_type()) {
    // required .Command.CommandType type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Command)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string srcId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->srcid());

    // required int32 version = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->version());

    // required .Command.CommandType type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Command*>(&from));
}

void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Command)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_srcid();
      srcid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.srcid_);
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Command::Swap(Command* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Command::InternalSwap(Command* other) {
  srcid_.Swap(&other->srcid_);
  std::swap(version_, other->version_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::std::string Command::GetTypeName() const {
  return "Command";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Command

// required .Command.CommandType type = 1;
bool Command::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Command::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void Command::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void Command::clear_type() {
  type_ = 1;
  clear_has_type();
}
::Command_CommandType Command::type() const {
  // @@protoc_insertion_point(field_get:Command.type)
  return static_cast< ::Command_CommandType >(type_);
}
void Command::set_type(::Command_CommandType value) {
  assert(::Command_CommandType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Command.type)
}

// required string srcId = 2;
bool Command::has_srcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Command::set_has_srcid() {
  _has_bits_[0] |= 0x00000001u;
}
void Command::clear_has_srcid() {
  _has_bits_[0] &= ~0x00000001u;
}
void Command::clear_srcid() {
  srcid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_srcid();
}
const ::std::string& Command::srcid() const {
  // @@protoc_insertion_point(field_get:Command.srcId)
  return srcid_.GetNoArena();
}
void Command::set_srcid(const ::std::string& value) {
  set_has_srcid();
  srcid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Command.srcId)
}
#if LANG_CXX11
void Command::set_srcid(::std::string&& value) {
  set_has_srcid();
  srcid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Command.srcId)
}
#endif
void Command::set_srcid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_srcid();
  srcid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Command.srcId)
}
void Command::set_srcid(const char* value, size_t size) {
  set_has_srcid();
  srcid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Command.srcId)
}
::std::string* Command::mutable_srcid() {
  set_has_srcid();
  // @@protoc_insertion_point(field_mutable:Command.srcId)
  return srcid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Command::release_srcid() {
  // @@protoc_insertion_point(field_release:Command.srcId)
  clear_has_srcid();
  return srcid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Command::set_allocated_srcid(::std::string* srcid) {
  if (srcid != NULL) {
    set_has_srcid();
  } else {
    clear_has_srcid();
  }
  srcid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), srcid);
  // @@protoc_insertion_point(field_set_allocated:Command.srcId)
}

// required int32 version = 3;
bool Command::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Command::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
void Command::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void Command::clear_version() {
  version_ = 0;
  clear_has_version();
}
::google::protobuf::int32 Command::version() const {
  // @@protoc_insertion_point(field_get:Command.version)
  return version_;
}
void Command::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Command.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Heartbeat::kTaskTypeFieldNumber;
const int Heartbeat::kTaskIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Heartbeat::Heartbeat()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_HB_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:Heartbeat)
}
Heartbeat::Heartbeat(const Heartbeat& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  taskid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_taskid()) {
    taskid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.taskid_);
  }
  tasktype_ = from.tasktype_;
  // @@protoc_insertion_point(copy_constructor:Heartbeat)
}

void Heartbeat::SharedCtor() {
  _cached_size_ = 0;
  taskid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tasktype_ = 1;
}

Heartbeat::~Heartbeat() {
  // @@protoc_insertion_point(destructor:Heartbeat)
  SharedDtor();
}

void Heartbeat::SharedDtor() {
  taskid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Heartbeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Heartbeat& Heartbeat::default_instance() {
  protobuf_HB_2eproto::InitDefaults();
  return *internal_default_instance();
}

Heartbeat* Heartbeat::New(::google::protobuf::Arena* arena) const {
  Heartbeat* n = new Heartbeat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Heartbeat::Clear() {
// @@protoc_insertion_point(message_clear_start:Heartbeat)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_taskid()) {
      GOOGLE_DCHECK(!taskid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*taskid_.UnsafeRawStringPointer())->clear();
    }
    tasktype_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Heartbeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:Heartbeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Heartbeat.TaskType taskType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Heartbeat_TaskType_IsValid(value)) {
            set_tasktype(static_cast< ::Heartbeat_TaskType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string taskId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Heartbeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Heartbeat)
  return false;
#undef DO_
}

void Heartbeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Heartbeat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .Heartbeat.TaskType taskType = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->tasktype(), output);
  }

  // required string taskId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->taskid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:Heartbeat)
}

size_t Heartbeat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:Heartbeat)
  size_t total_size = 0;

  if (has_taskid()) {
    // required string taskId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->taskid());
  }

  if (has_tasktype()) {
    // required .Heartbeat.TaskType taskType = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tasktype());
  }

  return total_size;
}
size_t Heartbeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Heartbeat)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string taskId = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->taskid());

    // required .Heartbeat.TaskType taskType = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->tasktype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Heartbeat::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Heartbeat*>(&from));
}

void Heartbeat::MergeFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Heartbeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_taskid();
      taskid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.taskid_);
    }
    if (cached_has_bits & 0x00000002u) {
      tasktype_ = from.tasktype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Heartbeat::CopyFrom(const Heartbeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Heartbeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Heartbeat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Heartbeat::Swap(Heartbeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Heartbeat::InternalSwap(Heartbeat* other) {
  taskid_.Swap(&other->taskid_);
  std::swap(tasktype_, other->tasktype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Heartbeat::GetTypeName() const {
  return "Heartbeat";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Heartbeat

// required .Heartbeat.TaskType taskType = 1;
bool Heartbeat::has_tasktype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Heartbeat::set_has_tasktype() {
  _has_bits_[0] |= 0x00000002u;
}
void Heartbeat::clear_has_tasktype() {
  _has_bits_[0] &= ~0x00000002u;
}
void Heartbeat::clear_tasktype() {
  tasktype_ = 1;
  clear_has_tasktype();
}
::Heartbeat_TaskType Heartbeat::tasktype() const {
  // @@protoc_insertion_point(field_get:Heartbeat.taskType)
  return static_cast< ::Heartbeat_TaskType >(tasktype_);
}
void Heartbeat::set_tasktype(::Heartbeat_TaskType value) {
  assert(::Heartbeat_TaskType_IsValid(value));
  set_has_tasktype();
  tasktype_ = value;
  // @@protoc_insertion_point(field_set:Heartbeat.taskType)
}

// required string taskId = 2;
bool Heartbeat::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Heartbeat::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
void Heartbeat::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
void Heartbeat::clear_taskid() {
  taskid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_taskid();
}
const ::std::string& Heartbeat::taskid() const {
  // @@protoc_insertion_point(field_get:Heartbeat.taskId)
  return taskid_.GetNoArena();
}
void Heartbeat::set_taskid(const ::std::string& value) {
  set_has_taskid();
  taskid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Heartbeat.taskId)
}
#if LANG_CXX11
void Heartbeat::set_taskid(::std::string&& value) {
  set_has_taskid();
  taskid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Heartbeat.taskId)
}
#endif
void Heartbeat::set_taskid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_taskid();
  taskid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Heartbeat.taskId)
}
void Heartbeat::set_taskid(const char* value, size_t size) {
  set_has_taskid();
  taskid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Heartbeat.taskId)
}
::std::string* Heartbeat::mutable_taskid() {
  set_has_taskid();
  // @@protoc_insertion_point(field_mutable:Heartbeat.taskId)
  return taskid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Heartbeat::release_taskid() {
  // @@protoc_insertion_point(field_release:Heartbeat.taskId)
  clear_has_taskid();
  return taskid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Heartbeat::set_allocated_taskid(::std::string* taskid) {
  if (taskid != NULL) {
    set_has_taskid();
  } else {
    clear_has_taskid();
  }
  taskid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), taskid);
  // @@protoc_insertion_point(field_set_allocated:Heartbeat.taskId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Heartbeat::kCmdFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::Command,
    ::google::protobuf::internal::MessageTypeTraits< ::Heartbeat >, 11, false >
  Heartbeat::cmd(kCmdFieldNumber, *::Heartbeat::internal_default_instance());

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
