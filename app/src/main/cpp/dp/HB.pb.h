// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HB.proto

#ifndef PROTOBUF_HB_2eproto__INCLUDED
#define PROTOBUF_HB_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
class Command;
class CommandDefaultTypeInternal;
extern CommandDefaultTypeInternal _Command_default_instance_;
class Heartbeat;
class HeartbeatDefaultTypeInternal;
extern HeartbeatDefaultTypeInternal _Heartbeat_default_instance_;

namespace protobuf_HB_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_HB_2eproto

enum Command_CommandType {
  Command_CommandType_HEARTBEAT = 1
};
bool Command_CommandType_IsValid(int value);
const Command_CommandType Command_CommandType_CommandType_MIN = Command_CommandType_HEARTBEAT;
const Command_CommandType Command_CommandType_CommandType_MAX = Command_CommandType_HEARTBEAT;
const int Command_CommandType_CommandType_ARRAYSIZE = Command_CommandType_CommandType_MAX + 1;

enum Heartbeat_TaskType {
  Heartbeat_TaskType_REALPLAY = 1,
  Heartbeat_TaskType_RECORDPLAY = 2,
  Heartbeat_TaskType_TALK = 3
};
bool Heartbeat_TaskType_IsValid(int value);
const Heartbeat_TaskType Heartbeat_TaskType_TaskType_MIN = Heartbeat_TaskType_REALPLAY;
const Heartbeat_TaskType Heartbeat_TaskType_TaskType_MAX = Heartbeat_TaskType_TALK;
const int Heartbeat_TaskType_TaskType_ARRAYSIZE = Heartbeat_TaskType_TaskType_MAX + 1;

// ===================================================================

class Command : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Command) */ {
 public:
  Command();
  virtual ~Command();

  Command(const Command& from);

  inline Command& operator=(const Command& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Command& default_instance();

  static inline const Command* internal_default_instance() {
    return reinterpret_cast<const Command*>(
               &_Command_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Command* other);

  // implements Message ----------------------------------------------

  inline Command* New() const PROTOBUF_FINAL { return New(NULL); }

  Command* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Command& from);
  void MergeFrom(const Command& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Command* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Command_CommandType CommandType;
  static const CommandType HEARTBEAT =
    Command_CommandType_HEARTBEAT;
  static inline bool CommandType_IsValid(int value) {
    return Command_CommandType_IsValid(value);
  }
  static const CommandType CommandType_MIN =
    Command_CommandType_CommandType_MIN;
  static const CommandType CommandType_MAX =
    Command_CommandType_CommandType_MAX;
  static const int CommandType_ARRAYSIZE =
    Command_CommandType_CommandType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required string srcId = 2;
  bool has_srcid() const;
  void clear_srcid();
  static const int kSrcIdFieldNumber = 2;
  const ::std::string& srcid() const;
  void set_srcid(const ::std::string& value);
  #if LANG_CXX11
  void set_srcid(::std::string&& value);
  #endif
  void set_srcid(const char* value);
  void set_srcid(const char* value, size_t size);
  ::std::string* mutable_srcid();
  ::std::string* release_srcid();
  void set_allocated_srcid(::std::string* srcid);

  // required int32 version = 3;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 3;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // required .Command.CommandType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::Command_CommandType type() const;
  void set_type(::Command_CommandType value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Command)
  // @@protoc_insertion_point(class_scope:Command)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_srcid();
  void clear_has_srcid();
  void set_has_version();
  void clear_has_version();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr srcid_;
  ::google::protobuf::int32 version_;
  int type_;
  friend struct protobuf_HB_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Heartbeat : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:Heartbeat) */ {
 public:
  Heartbeat();
  virtual ~Heartbeat();

  Heartbeat(const Heartbeat& from);

  inline Heartbeat& operator=(const Heartbeat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Heartbeat& default_instance();

  static inline const Heartbeat* internal_default_instance() {
    return reinterpret_cast<const Heartbeat*>(
               &_Heartbeat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Heartbeat* other);

  // implements Message ----------------------------------------------

  inline Heartbeat* New() const PROTOBUF_FINAL { return New(NULL); }

  Heartbeat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Heartbeat& from);
  void MergeFrom(const Heartbeat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Heartbeat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Heartbeat_TaskType TaskType;
  static const TaskType REALPLAY =
    Heartbeat_TaskType_REALPLAY;
  static const TaskType RECORDPLAY =
    Heartbeat_TaskType_RECORDPLAY;
  static const TaskType TALK =
    Heartbeat_TaskType_TALK;
  static inline bool TaskType_IsValid(int value) {
    return Heartbeat_TaskType_IsValid(value);
  }
  static const TaskType TaskType_MIN =
    Heartbeat_TaskType_TaskType_MIN;
  static const TaskType TaskType_MAX =
    Heartbeat_TaskType_TaskType_MAX;
  static const int TaskType_ARRAYSIZE =
    Heartbeat_TaskType_TaskType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required string taskId = 2;
  bool has_taskid() const;
  void clear_taskid();
  static const int kTaskIdFieldNumber = 2;
  const ::std::string& taskid() const;
  void set_taskid(const ::std::string& value);
  #if LANG_CXX11
  void set_taskid(::std::string&& value);
  #endif
  void set_taskid(const char* value);
  void set_taskid(const char* value, size_t size);
  ::std::string* mutable_taskid();
  ::std::string* release_taskid();
  void set_allocated_taskid(::std::string* taskid);

  // required .Heartbeat.TaskType taskType = 1;
  bool has_tasktype() const;
  void clear_tasktype();
  static const int kTaskTypeFieldNumber = 1;
  ::Heartbeat_TaskType tasktype() const;
  void set_tasktype(::Heartbeat_TaskType value);

  static const int kCmdFieldNumber = 101;
  static ::google::protobuf::internal::ExtensionIdentifier< ::Command,
      ::google::protobuf::internal::MessageTypeTraits< ::Heartbeat >, 11, false >
    cmd;
  // @@protoc_insertion_point(class_scope:Heartbeat)
 private:
  void set_has_tasktype();
  void clear_has_tasktype();
  void set_has_taskid();
  void clear_has_taskid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr taskid_;
  int tasktype_;
  friend struct protobuf_HB_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Command

// required .Command.CommandType type = 1;
inline bool Command::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Command::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Command::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Command::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Command_CommandType Command::type() const {
  // @@protoc_insertion_point(field_get:Command.type)
  return static_cast< ::Command_CommandType >(type_);
}
inline void Command::set_type(::Command_CommandType value) {
  assert(::Command_CommandType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:Command.type)
}

// required string srcId = 2;
inline bool Command::has_srcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Command::set_has_srcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Command::clear_has_srcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Command::clear_srcid() {
  srcid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_srcid();
}
inline const ::std::string& Command::srcid() const {
  // @@protoc_insertion_point(field_get:Command.srcId)
  return srcid_.GetNoArena();
}
inline void Command::set_srcid(const ::std::string& value) {
  set_has_srcid();
  srcid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Command.srcId)
}
#if LANG_CXX11
inline void Command::set_srcid(::std::string&& value) {
  set_has_srcid();
  srcid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Command.srcId)
}
#endif
inline void Command::set_srcid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_srcid();
  srcid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Command.srcId)
}
inline void Command::set_srcid(const char* value, size_t size) {
  set_has_srcid();
  srcid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Command.srcId)
}
inline ::std::string* Command::mutable_srcid() {
  set_has_srcid();
  // @@protoc_insertion_point(field_mutable:Command.srcId)
  return srcid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Command::release_srcid() {
  // @@protoc_insertion_point(field_release:Command.srcId)
  clear_has_srcid();
  return srcid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Command::set_allocated_srcid(::std::string* srcid) {
  if (srcid != NULL) {
    set_has_srcid();
  } else {
    clear_has_srcid();
  }
  srcid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), srcid);
  // @@protoc_insertion_point(field_set_allocated:Command.srcId)
}

// required int32 version = 3;
inline bool Command::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Command::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Command::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Command::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 Command::version() const {
  // @@protoc_insertion_point(field_get:Command.version)
  return version_;
}
inline void Command::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:Command.version)
}

// -------------------------------------------------------------------

// Heartbeat

// required .Heartbeat.TaskType taskType = 1;
inline bool Heartbeat::has_tasktype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Heartbeat::set_has_tasktype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Heartbeat::clear_has_tasktype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Heartbeat::clear_tasktype() {
  tasktype_ = 1;
  clear_has_tasktype();
}
inline ::Heartbeat_TaskType Heartbeat::tasktype() const {
  // @@protoc_insertion_point(field_get:Heartbeat.taskType)
  return static_cast< ::Heartbeat_TaskType >(tasktype_);
}
inline void Heartbeat::set_tasktype(::Heartbeat_TaskType value) {
  assert(::Heartbeat_TaskType_IsValid(value));
  set_has_tasktype();
  tasktype_ = value;
  // @@protoc_insertion_point(field_set:Heartbeat.taskType)
}

// required string taskId = 2;
inline bool Heartbeat::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Heartbeat::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Heartbeat::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Heartbeat::clear_taskid() {
  taskid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_taskid();
}
inline const ::std::string& Heartbeat::taskid() const {
  // @@protoc_insertion_point(field_get:Heartbeat.taskId)
  return taskid_.GetNoArena();
}
inline void Heartbeat::set_taskid(const ::std::string& value) {
  set_has_taskid();
  taskid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Heartbeat.taskId)
}
#if LANG_CXX11
inline void Heartbeat::set_taskid(::std::string&& value) {
  set_has_taskid();
  taskid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Heartbeat.taskId)
}
#endif
inline void Heartbeat::set_taskid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_taskid();
  taskid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Heartbeat.taskId)
}
inline void Heartbeat::set_taskid(const char* value, size_t size) {
  set_has_taskid();
  taskid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Heartbeat.taskId)
}
inline ::std::string* Heartbeat::mutable_taskid() {
  set_has_taskid();
  // @@protoc_insertion_point(field_mutable:Heartbeat.taskId)
  return taskid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Heartbeat::release_taskid() {
  // @@protoc_insertion_point(field_release:Heartbeat.taskId)
  clear_has_taskid();
  return taskid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Heartbeat::set_allocated_taskid(::std::string* taskid) {
  if (taskid != NULL) {
    set_has_taskid();
  } else {
    clear_has_taskid();
  }
  taskid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), taskid);
  // @@protoc_insertion_point(field_set_allocated:Heartbeat.taskId)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Command_CommandType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::Heartbeat_TaskType> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace pb.google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_HB_2eproto__INCLUDED
